#+title: Project


* Questions
** [?] Get some clarity on the form of observations
This is listed in the doc as structured, but it seems the structure is loosely defined.
I want to check if these are some valid observations:

+ Are all values in strings? e.g. "True" vs True or no guarantees are made here?
+ Will the software expect bad data?
  NaN values, blank values, gibberish, corrupted, or invalid values (e.g. "2 ms" for a window size)
+ Will we expect all measurements in the same units?
  Always feet? or inches or meters?
  Always numbers? or strings (e.g 12 vs "12" vs "twelve feet")
  Always whole numbers
+ some example made up observations
  If you could indicate whether these are valid or realistic? (or don't worry about it)
  - "Attic vent ember rated": "True|False"
  - "Attic vent screen nember rated": "True|False"
  - "Chimney": "Can withstand embers"
  - {"Roof Type": "Class A",
    "Roof maintenance": "poor"}
    or
    {"Roof Type": "Class A",
    "Roof age": "12 years"}
    or
    {"Roof Type": "Class A",
    "Time since roof assembly": "12 years"}
    or any combination of these
  - {"Roof Gaps": "None"}
    and
    {"Roof Gaps": "None"}
    or
    {"Roof": "No gaps"}
    and
    {"Roof": "Some gaps detected"}
    and
    {"Roof": "No gaps, tiles are aging"}
** [?] Some questions about rules
+ The example rule for windows shows
  - Multiply safe Distance by 3 for single pane windows
  - Multiply safe Distance by 2 for single pane windows

  What do these 2 bullets refer to?
+ Are the "Example Mitigations" in the table part of the rule?
  i.e. are they entered by the "Applied Science User" and stored in the system?
  or are they example outputs to expect from running the rule against an observation set?
** [?] Are there any performance or load requirements?
Is there a scale in mind for the number of concurrent users, number of
concurrent operations, or latency for the system to handle? or for POC purposes
we can punt on scale and performance?
* Design considerations
just keeping my notes here roughly
** Rules engine should be append-only
or changes should be tracked somehow. I could use paper trail or other mechanism
** Should a rule be a single table or multiple tables joined
i.e.
A:
~rails g scaffold rule name:string written_rule:text functional_rule:text example_mitigation:text~

vs
B:
rule has_many :functional_rules
rule has_many :full_mitigations
rule has_many :bridge_mitigations

Thoughts:
+ rules seem loosely defined.
  it will be difficult to split them into multiple objects. The nesting seems arbitrary
+ from what i'm reading in the examples, the rule can be placed into the prompt as context in it's entirety.
  Doesn't seem much value in even making them separate columns, let alone what value would there be in separating them into separate tables/models
* Tasks
** DONE underwriter user can sign in
CLOSED: [2025-05-02 Fri 15:23]
** DONE applied science user can sign in
CLOSED: [2025-05-02 Fri 15:23]
** DONE underwriter user cannot view admin dashboard or applied scientist dashboard
CLOSED: [2025-05-02 Fri 23:12]
** DONE create core models and relationships
CLOSED: [2025-05-03 Sat 10:09]
+ Property
+ Rule
+ Observation
** DONE property crud
CLOSED: [2025-05-03 Sat 11:36]
** DONE rule database CRUD
CLOSED: [2025-05-03 Sat 11:36]
** DONE rule database can be CRUD by applied science user
CLOSED: [2025-05-03 Sat 15:59]
** DONE observation CRUD
CLOSED: [2025-05-03 Sat 15:07]
how to handle json input?
** DONE admin dashboard has links to other crud
CLOSED: [2025-05-03 Sat 15:58]
** DONE applied_scientist user has links to other crud
CLOSED: [2025-05-03 Sat 15:58]
** DONE underwriter dashboard has links to other crud
CLOSED: [2025-05-03 Sat 15:58]
** DONE crud pages link back to dashboard
CLOSED: [2025-05-03 Sat 15:58]
** DONE Rule can be run against observation
CLOSED: [2025-05-03 Sat 20:19]
** DONE print/format observation content (json) nicely
CLOSED: [2025-05-03 Sat 20:21]
** DONE run rules asynchronously against observation
CLOSED: [2025-05-03 Sat 20:35]
so that we can run multiple calls to llm simultaneously
** DONE examine paper trail for rules history tracking
CLOSED: [2025-05-03 Sat 20:58]
if this will be easy enough to use and serve the purpose just install the gem
otherwise we need an append only data model/structure to track changes
** DONE rule database can track changes
CLOSED: [2025-05-03 Sat 20:58]
** DONE create page to run all rules against observation/property
CLOSED: [2025-05-04 Sun 00:02]
** DONE output rule results in pretty readable format
CLOSED: [2025-05-04 Sun 00:03]
** DONE create page or control to test rule against observation
CLOSED: [2025-05-04 Sun 12:10]
** DONE rules created before observation can be run against it
CLOSED: [2025-05-04 Sun 20:13]
Separate control that uses the rule's observed_at date to look back into history
and grab the versions of rules which correspond to that time

this should be the default button for underwriters, but they can have a separate
button that just runs against the most current rules. That's the existing
functionality.
** DONE add control for underwriter to see the rules
CLOSED: [2025-05-04 Sun 20:18]
** DONE link to rule from the rule results
CLOSED: [2025-05-04 Sun 20:51]
** DONE update readme with all necessary content
CLOSED: [2025-05-04 Sun 22:35]
** DONE list and link to observations from the property page.
CLOSED: [2025-05-05 Mon 08:46]
** DONE upload the code to github
CLOSED: [2025-05-05 Mon 13:00]
** DONE show observations in a nicer format
CLOSED: [2025-05-05 Mon 12:26]
** DONE create a partial to render rule results
CLOSED: [2025-05-05 Mon 13:00]
** DONE show results in a nicer format
CLOSED: [2025-05-05 Mon 13:00]
** DONE restart and reseed data
CLOSED: [2025-05-08 Thu 14:35]
i did a docker system prune
** TODO Add a way to create an observation from the property page
I want a button here that says "make an observation"
this then opens a form to create one
** TODO if there's time consider adding simpleform and styling
** TODO add login form/controls to the homepage
** TODO come up with demo scenarios
to illustrate all the points of the problem statement
** TODO create some more example observations and add to seeds
** TODO create some more example rules and add to seeds
** -- MILESTONE--
everything below here i consider bonus
** TODO setup logger
** TODO make existing tests pass
** TODO write tests
*** TODO services/rule_application
** TODO create vulnerability model
** TODO create mitigation model
** TODO create vulnerabilities and mitigations when property/observation is evaluated
** TODO redirect to target page after login
if you goto some page that requires login
e.g. /properties
then after you log in it should take you straight there.
needs a login trampoline
** TODO allow rich text input for rules input
According the example it should allow bold and bullets etc
** TODO Improve UI for checking vulnerabilities
** TODO Add/create evals
